"""init

Revision ID: 0c5131c17d01
Revises: 
Create Date: 2021-03-11 18:05:54.451684

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '0c5131c17d01'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('User',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('create_date', sa.DateTime(), nullable=True),
    sa.Column('role', sa.String(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    op.create_table('UserRegister',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    op.create_table('Grooming',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('project_id', sa.String(), nullable=False),
    sa.Column('pt_id', sa.String(), nullable=False),
    sa.Column('tm_id', sa.String(), nullable=False),
    sa.Column('pt_version', sa.Integer(), nullable=False),
    sa.Column('tm_version', sa.Integer(), nullable=False),
    sa.Column('form', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('manager_id', sa.String(), nullable=True),
    sa.Column('start_date', sa.DateTime(), nullable=True),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('with_clustering', sa.Boolean(), nullable=False),
    sa.Column('clusters', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('is_finished', sa.Boolean(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('traffic', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('service_devices', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('clustered_tms', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('service_mapping', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['manager_id'], ['User.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('GroomingRegister',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('project_id', sa.String(), nullable=False),
    sa.Column('pt_id', sa.String(), nullable=False),
    sa.Column('tm_id', sa.String(), nullable=False),
    sa.Column('pt_version', sa.Integer(), nullable=False),
    sa.Column('tm_version', sa.Integer(), nullable=False),
    sa.Column('form', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('manager_id', sa.String(), nullable=True),
    sa.Column('start_date', sa.DateTime(), nullable=True),
    sa.Column('with_clustering', sa.Boolean(), nullable=False),
    sa.Column('clusters', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('is_failed', sa.Boolean(), nullable=False),
    sa.Column('exception', sa.String(), nullable=True),
    sa.Column('is_finished', sa.Boolean(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['manager_id'], ['User.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('PhysicalTopology',
    sa.Column('primary_id', sa.String(), nullable=False),
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('data', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('owner_id', sa.String(), nullable=True),
    sa.Column('create_date', sa.DateTime(), nullable=True),
    sa.Column('comment', sa.String(), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['User.id'], ),
    sa.PrimaryKeyConstraint('primary_id')
    )
    op.create_table('PhysicalTopologyUsers',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('create_date', sa.DateTime(), nullable=True),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('pt_id', sa.String(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['User.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('RWA',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('project_id', sa.String(), nullable=False),
    sa.Column('grooming_id', sa.String(), nullable=False),
    sa.Column('pt_id', sa.String(), nullable=False),
    sa.Column('tm_id', sa.String(), nullable=False),
    sa.Column('pt_version', sa.Integer(), nullable=False),
    sa.Column('tm_version', sa.Integer(), nullable=False),
    sa.Column('manager_id', sa.String(), nullable=True),
    sa.Column('start_date', sa.DateTime(), nullable=True),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('form', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('is_failed', sa.Boolean(), nullable=False),
    sa.Column('exception', sa.String(), nullable=True),
    sa.Column('is_finished', sa.Boolean(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('lightpaths', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.ForeignKeyConstraint(['manager_id'], ['User.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('RWARegister',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('project_id', sa.String(), nullable=False),
    sa.Column('grooming_id', sa.String(), nullable=False),
    sa.Column('pt_id', sa.String(), nullable=False),
    sa.Column('tm_id', sa.String(), nullable=False),
    sa.Column('pt_version', sa.Integer(), nullable=False),
    sa.Column('tm_version', sa.Integer(), nullable=False),
    sa.Column('manager_id', sa.String(), nullable=True),
    sa.Column('start_date', sa.DateTime(), nullable=True),
    sa.Column('form', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('is_failed', sa.Boolean(), nullable=False),
    sa.Column('exception', sa.String(), nullable=True),
    sa.Column('is_finished', sa.Boolean(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['manager_id'], ['User.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('TrafficMatrix',
    sa.Column('primary_id', sa.String(), nullable=False),
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('data', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('owner_id', sa.String(), nullable=True),
    sa.Column('create_date', sa.DateTime(), nullable=True),
    sa.Column('comment', sa.String(), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['User.id'], ),
    sa.PrimaryKeyConstraint('primary_id')
    )
    op.create_table('TrafficMatrixUsers',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('create_date', sa.DateTime(), nullable=True),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('tm_id', sa.String(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['User.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('Project',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('create_date', sa.DateTime(), nullable=True),
    sa.Column('owner_id', sa.String(), nullable=True),
    sa.Column('tm_id', sa.String(), nullable=True),
    sa.Column('pt_id', sa.String(), nullable=True),
    sa.Column('current_pt_version', sa.Integer(), nullable=False),
    sa.Column('current_tm_version', sa.Integer(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['User.id'], ),
    sa.ForeignKeyConstraint(['pt_id'], ['PhysicalTopology.primary_id'], ),
    sa.ForeignKeyConstraint(['tm_id'], ['TrafficMatrix.primary_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('Cluster',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('data', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('create_date', sa.DateTime(), nullable=True),
    sa.Column('pt_id', sa.String(), nullable=False),
    sa.Column('pt_version', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.String(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['Project.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ProjectUsers',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('create_date', sa.DateTime(), nullable=True),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('project_id', sa.String(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['Project.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['User.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('ProjectUsers')
    op.drop_table('Cluster')
    op.drop_table('Project')
    op.drop_table('TrafficMatrixUsers')
    op.drop_table('TrafficMatrix')
    op.drop_table('RWARegister')
    op.drop_table('RWA')
    op.drop_table('PhysicalTopologyUsers')
    op.drop_table('PhysicalTopology')
    op.drop_table('GroomingRegister')
    op.drop_table('Grooming')
    op.drop_table('UserRegister')
    op.drop_table('User')
    # ### end Alembic commands ###
