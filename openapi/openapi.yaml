openapi: 3.0.0

info:
  version: "1.0.0"
  title: NetPlanner API
  description: First version of NetPlanner API
  contact:
    name: Farzad Mohammadi
    email: farzad.mohammadi87@gmail.com
    
  
servers:   
  - url: /v1
    description: development server of this version
  
  
  - url: /v1-p
    description: production server of this version
    
components:
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: user.decode_token
  schemas:
    PhysicalTopology:
      type: object
      properties:
        Nodes:
          type: array
          items:
            type: object
            properties:
              Name:
                type: string
              lat: 
                type: number
                format: float
              lng:
                type: number
                format: float
              ROADM_type:
                type: string
            required: 
              - Name
              - lat
              - lng
              - ROADM_type
            
        Links:
          type: array
          items:
            type: object
            properties:
              Source:
                type: string
              Destination:
                type: string
              Distance:
                type: number
                format: float
              FiberType:
                type: string
            required: 
              - Source
              - Destination
              - Distance
              - FiberType
    TrafficMatrix:
      type: object
      properties:
        Demands: 
          type: array
          items:
            type: object
            properties:
              Source:
                type: string
              Destination:
                type: string
              Type:
                type: string
              ProtectionType:
                type: string
              Services:
                type: array
                items:
                  type: object
                  properties:
                    Quantity:
                      type: integer
                      format: int32
                    SLA:
                      type: string
                    Type:
                      type: string
                    Granularity:
                      type: string
                    Granularity_vc12:
                      type: string
                    Granularity_vc4:
                      type: string
                  required: 
                    - Type
                    - Quantity
            required: 
              - Source
              - Destination
              - Type
              - Services
              - ProtectionType
            
    
  parameters:
    Id:
      name: Id
      in: query
      required: true
      schema:
        type: integer
    UserId:
      name: UserId
      in: path
      required: true
      schema:
        type: integer
      
    
paths:
  /PhysicalTopology/{UserId}:
    summary: this path is handeling Physical Topology interactions
    get:
      tags: 
       - Physical Topology
      summary: Obtaining stored physical topology
      security:
        - jwt: []
      description: With an id you can get a Physical Topology from database
      operationId: PhysicalTopology.get_PhysicalTopology
      parameters: 
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/UserId'
      responses:
        200:
          description: Physical Topology found
          content:
            appliation/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PhysicalTopology'
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    type: string
                required:
                  - error_msg
                
                
    
    post:
      tags: 
        - Physical Topology
      summary: Creating New Physical Topology
      security:
        - jwt: []
      description: This method creates a Physical Topology with given data and answers 
        with its id
      operationId: PhysicalTopology.create_PhysicalTopology
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/UserId'
      requestBody:
        description: providing information for creating new Physical Topology
        content:
         application/json:
          schema:
            $ref: '#/components/schemas/PhysicalTopology'
            
      responses:
        201:
          description: A new Physical Topology created
          content:
            application/json:
              schema:
                type: object
                properties:
                  Id:
                    type: integer
                required: 
                  - Id
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    type: string
                required:
                  - error_msg
    
    put:
      tags: 
        - Physical Topology
      summary: Updating existing Physical Topology
      security:
        - jwt: []
      description: this method updates any given node or link in a particular Physical Topology
      operationId: PhysicalTopology.update_PhysicalTopology
      parameters: 
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/UserId'
      requestBody:
        description: provide anything that you want to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhysicalTopology'
      responses:
        200:
          description: Physical Topology Updated
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    type: string
                required:
                  - error_msg
    
    delete:
      tags: 
       - Physical Topology
      summary: Deleting existing Physical Topology
      security:
        - jwt: []
      description: this method deletes corresponding Physical Topology
      operationId: PhysicalTopology.delete_PhysicalTopology
      parameters: 
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/UserId'
      responses:
        200:
          description: Physical Topology deleted
        
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    type: string
                required:
                  - error_msg
          
  /PhysicalTopology/read_all/{UserId}:
    summary: Reading all PT's
    get:
      tags:
        - Physical Topology
      summary: Reading all PT's stored in Database
      security:
        - jwt: []
      operationId: PhysicalTopology.read_all_PT
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        200:
          description: Returning back all PT's
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    id:
                      type: integer
                      format: int64
                    create_date:
                      type: string
                      format: date-time
                  required:
                    - name
                    - id
                    - create_date
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    type: string
                required:
                  - error_msg
                
          
  /TrafficMatrix/{UserId}:
    summary: This path is handling operations related to Traffic Matrix
    get:
      tags: 
        - Traffic Matrix
      summary: Obtaining stored Traffic Matrix
      security:
        - jwt: []
      description: Accessing a traffic Matrix using it's id
      parameters: 
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/UserId'
      operationId: TrafficMatrix.get_TrafficMatrix
      responses:
        200:
          description: Requested Traffic Matrix found
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TrafficMatrix'
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    type: string
                required:
                  - error_msg
            
    
    post:
      tags: 
       - Traffic Matrix
      summary: Creating new Traffic Matrix
      security:
        - jwt: []
      description: This method creates a Traffic Matrix and returns its id
      operationId: TrafficMatrix.create_TrafficMatrix
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/UserId'
      requestBody: 
        description: Providing Traffic Matrix information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrafficMatrix'
      
      responses:
        201:
          description: Traffic Matrix created
          content:
            application/json:
              schema:
                type: object
                properties:
                  Id:
                    type: integer
                    format: int64
                required: 
                 - Id
    put:
      tags: 
       - Traffic Matrix
      summary: Updating an existing Traffic Matrix
      security:
        - jwt: []
      description: This method updates a Traffic Matrix from database
      parameters: 
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/UserId'
      operationId: TrafficMatrix.update_TrafficMatrix  
      requestBody:
        description: Providing information for updating Traffic Matrix
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrafficMatrix'
      
      responses:
        200:
          description: Traffic Matrix updated

        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    type: string
                required:
                  - error_msg
    delete:
      tags: 
       - Traffic Matrix
      summary: Deleting an existing Traffic Matrix
      security:
        - jwt: []
      operationId: TrafficMatrix.delete_TrafficMatrix
      description: This method deletes a trafic Matrix from database
      parameters: 
       - $ref: '#/components/parameters/Id'
       - $ref: '#/components/parameters/UserId'
      responses:
        200:
          description: Traffic Matrix deleted
          
  /TrafficMatrix/read_all/{UserId}:
    description: Reading all saved TM's for a user
    get:
      tags:
       - Traffic Matrix
      summary: Reading all Traffic Matrices
      security:
        - jwt: []
      parameters:
        - $ref: '#/components/parameters/UserId'
      operationId: TrafficMatrix.read_all
      responses:
        200:
          description: Returning TM's
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    id:
                      type: integer
                      format: int64
                    create_date:
                      type: string
                      format: date-time
                  required:
                    - name
                    - id
                    - date-time
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    type: string
                required:
                  - error_msg
          
          
  /Clustering/{UserId}:
    summary: This path is handling operations related to Clustering
    post:
      operationId: Clustering.create_Cluster
      summary: Creating clusters
      tags: 
        - Clustering
      description: Creating new cluster in a Physical Topology (use this method if you want to save cluster in database)
      parameters: 
        - name: PhysicalTopologyId
          in: query
          schema:
            type: integer
            format: int64
          required: true
        - $ref: '#/components/parameters/UserId'
      requestBody:
        description: Providing Gateways and Subnodes
        content:
          application/json:
            schema:
              type: object
              properties:
                Gateways:
                  type: array
                  items:
                    type: string
                Subnodes:
                  type: array
                  items:
                    type: string
      responses:
        201:
          description: Cluster saved in DataBase
          content:
            application/json:
              schema:
                type: object
                properties:
                  ClusterId:
                    type: integer
                    format: int64
                required: 
                  - ClusterId
  /Project/{UserId}:
    summary: This path job is to handle projects
    get:
      description: Accessing a existing Project
      security:
        - jwt: []
      summary: Obtaining stored Project
      tags: 
        - Project
      parameters: 
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/UserId'
      operationId: Project.read_Project
      responses:
        200:
          description: Sending PT_id, TM_id
          content:
            application/json:
              schema:
                type: object
                properties:
                  tm_id:
                    type: integer
                  pt_id:
                    type: integer
                required:
                  - tm_id
                  - pt_id
                  #results list of id's
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    type: string
                required:
                  - error_msg
                
    post:
      description: Creating new project using PT, TM, Cluster Id
      security:
        - jwt: []
      summary: Creating new Project
      tags: 
       - Project
      parameters: 
        - name: TM_Id
          in: query
          required: true
          schema:
            type: integer
            format: int64
          description: Traffic Matrix Id
        
        - name: PT_Id
          in: query
          required: true
          schema:
            type: integer
            format: int64
          description: Physical Topology Id
        
        - name: Clusters_Id
          in: query
          schema:
            type: array
            items:
              type: integer
              format: int64
          description: Clusters Id
        
        - $ref: '#/components/parameters/UserId'

        - name: Name
          in: query
          required: true
          schema:
           type: string
      
      operationId: Project.create_Project
      responses:
        201:
          description: Sending back Project Id
          content:
            application/json:
              schema:
                type: object
                properties:
                  Project_Id:
                    type: integer
                    format: int64
                required: 
                  - Project_Id
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    type: string
                required:
                  - error_msg
    
    put:
      summary: Updating an existing Project
      security:
        - jwt: []
      tags: 
        - Project
      description: Updating Project Using Project_Id
      parameters: 
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/UserId'

        - name: TM_Id
          in: query
          schema:
            type: integer
            format: int64
          description: Traffic Matrix Id
        
        - name: PT_Id
          in: query
          schema:
            type: integer
            format: int64
          description: Physical Topology Id
        
        - name: Clusters_Id
          in: query
          schema:
            type: array
            items:
              type: integer
              format: int64
          description: Clusters Id
        
        - name: Name
          in: query
          required: true
          schema:
            type: string
      
      operationId: Project.update_Project
      responses:
        200:
          description: Done
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    type: string
                required:
                  - error_msg
    
    delete:
      summary: Deleting an Existing Project
      security:
        - jwt: []
      tags:
        - Project
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/UserId'
      operationId: Project.delete_Project
      
      responses:
        200:
          description: Project deleted
  /login:
    summary: path for logging in
    get:
      summary: Accessing UserId with username and password
      tags:
        - User
      parameters:
        - name: Username
          in: query
          required: true
          schema:
            type: string
        
        - name: Password
          in: query
          required: true
          schema:
            type: string
            format: password
      operationId: user.login
      responses:
        200:
          description: User Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  UserId:
                    type: integer
                  token:
                    type: string
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    type: string
                required:
                  - error_msg
  
  /Project/read_all/{UserId}:
    summary: path for getting all projects associated with UserId
    get:
      summary: getting all projects
      tags:
        - Project
      parameters:
        - $ref: '#/components/parameters/UserId'
      operationId: Project.read_all
      responses:
        200:
          description: Projects found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    Id:
                      type: integer
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    type: string
                required:
                  - error_msg
      security:
        - jwt: []

              
      
      
      
      