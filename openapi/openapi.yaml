openapi: 3.0.0

info:
  version: "1.0.0"
  title: NetPlanner API
  description: First version of NetPlanner API
  contact:
    name: Farzad Mohammadi
    email: farzad.mohammadi87@gmail.com
    
  
servers:   
  - url: /v1
    description: development server of this version
  
  
  - url: /v1_p
    description: production server of this version
    
components:
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: user.decode_token
  schemas:
    pt_id:
      type: string
    tm_id:
      type: string
    id:
      type: string
    name:
      type: string
    error_msg:
      type: string
    comment:
      type: string
    version:
      type: integer
    
    cluster:
      type: object
      properties:
        gateways:
          type: array
          items:
            type: string
        subnodes:
          type: array
          items:
            type: string
        color:
          type: string
        type:
          type: string
      required:
        - gateways
        - subnodes
    
    physical_topology:
      type: object
      properties:
        nodes:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              lat: 
                type: number
                format: float
              lng:
                type: number
                format: float
              roadm_type:
                type: string
            required: 
              - name
              - lat
              - lng
              - roadm_type
            
        links:
          type: array
          items:
            type: object
            properties:
              source:
                type: string
              destination:
                type: string
              distance:
                type: number
                format: float
              fiber_type:
                type: string
            required: 
              - source
              - destination
              - distance
              - fiber_type
    traffic_matrix:
      type: object
      properties:
        demands: 
          type: array
          items:
            type: object
            properties:
              source:
                type: string
              destination:
                type: string
              id:
                type: integer
              type:
                type: string
              protection_type:
                type: string
              restoration_type:
                type: string
              services:
                type: array
                items:
                  type: object
                  properties:
                    quantity:
                      type: integer
                      format: int32
                    sla:
                      type: string
                    type:
                      type: string
                    granularity:
                      type: string
                    granularity_vc12:
                      type: string
                    granularity_vc4:
                      type: string
                  required: 
                    - type
                    - quantity
            required: 
              - source
              - destination
              - type
              - services
              - protection_type
              - restoration_type
            
    
  parameters:
    id:
      name: id
      in: query
      required: true
      schema:
        type: string
    user_id:
      name: user_id
      in: path
      required: true
      schema:
        type: string
    project_id:
      name: project_id
      in: query
      schema:
        type: string
    cluster_id:
      name: cluster_id
      in: query
      schema:
        type: string
    version:
      name: version
      in: query
      schema:
        type: integer
      
    
paths:
  /physical_topologies/{user_id}:
    summary: this path is handling Physical Topology interactions
    get:
      tags: 
       - Physical Topology
      summary: Obtaining stored physical topology
      description: With an id you can get a Physical Topology from database
      operationId: PhysicalTopology.get_physical_topology
      parameters: 
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/version'
      responses:
        200:
          description: Physical Topology found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    physical_topology:
                      $ref: '#/components/schemas/physical_topology'
                    version:
                      $ref: '#/components/schemas/version'
                    name:
                      $ref: '#/components/schemas/name'
                    id:
                      $ref: '#/components/schemas/id'
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    $ref: '#/components/schemas/error_msg'
                required:
                  - error_msg
                
                
    
    post:
      tags: 
        - Physical Topology
      summary: Creating New Physical Topology
      description: This method creates a Physical Topology with given data and answers 
        with its id
      operationId: PhysicalTopology.create_physical_topology
      parameters: 
        - $ref: '#/components/parameters/user_id'
      requestBody:
        description: providing information for creating new Physical Topology
        content:
         application/json:
          schema:
            type: object
            properties:
              physical_topology:
                $ref: '#/components/schemas/physical_topology'
              name:
                $ref: '#/components/schemas/name'
              comment:
                $ref: '#/components/schemas/comment'
            
            
      responses:
        201:
          description: A new Physical Topology created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/id'
                required: 
                  - id
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    $ref: '#/components/schemas/error_msg'
                  physical_topology:
                    $ref: '#/components/schemas/physical_topology'
                required:
                  - error_msg
    
    put:
      tags: 
        - Physical Topology
      summary: Updating existing Physical Topology
      description: this method updates any given node or link in a particular Physical Topology
      operationId: PhysicalTopology.update_physical_topology
      parameters: 
        - $ref: '#/components/parameters/user_id'
      requestBody:
        description: provide anything that you want to update
        content:
          application/json:
            schema:
              type: object
              properties:
                physical_topology:
                  $ref: '#/components/schemas/physical_topology'
                id:
                  $ref: '#/components/schemas/id'
                name:
                  $ref: '#/components/schemas/name'
                comment:
                  $ref: '#/components/schemas/comment'

      responses:
        200:
          description: Physical Topology Updated
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    $ref: '#/components/schemas/error_msg'
                  physical_topology:
                    $ref: '#/components/schemas/physical_topology'
                required:
                  - error_msg
    
    delete:
      tags: 
       - Physical Topology
      summary: Deleting existing Physical Topology
      description: this method deletes corresponding Physical Topology
      operationId: PhysicalTopology.delete_physical_topology
      parameters: 
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/version'
      responses:
        200:
          description: Physical Topology deleted
        
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    $ref: '#/components/schemas/error_msg'
                required:
                  - error_msg
  
  /physical_topologies/from_excel/{user_id}:
    post:
      tags:
        - Physical Topology
      summary: creating physical topology with excel file
      operationId: PhysicalTopology.read_from_excel
      parameters:
        - $ref: '#/components/parameters/user_id'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                pt_binary:
                  type: string
                  format: binary
                name:
                  $ref: '#/components/schemas/name'
      responses:
        201:
          description: physical_topology in JSON
          content:
            application/json:
              schema:
                type: object
                properties:
                  physical_topology:
                    $ref: '#/components/schemas/physical_topology'
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    $ref: '#/components/schemas/error_msg'
                  physical_topology:
                    $ref: '#/components/schemas/physical_topology'
                required:
                  - error_msg
          
  /physical_topologies/read_all/{user_id}:
    summary: Reading all physical topologies
    get:
      tags:
        - Physical Topology
      summary: Reading all physical topologies stored in Database
      operationId: PhysicalTopology.read_all_pts
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          description: Returning back all physical topologies
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      $ref: '#/components/schemas/name'
                    id:
                      $ref: '#/components/schemas/id'
                    create_date:
                      type: string
                      format: date-time
                    version:
                      $ref: '#/components/schemas/version'
                    comment:
                      $ref: '#/components/schemas/version'
                  required:
                    - name
                    - id
                    - create_date
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    $ref: '#/components/schemas/error_msg'
                required:
                  - error_msg
                
          
  /traffic_matrices/{user_id}:
    summary: This path is handling operations related to Traffic Matrix
    get:
      tags: 
        - Traffic Matrix
      summary: Obtaining stored Traffic Matrix
      description: Accessing a traffic Matrix using it's id
      parameters: 
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/version'
      operationId: TrafficMatrix.get_traffic_matrix
      responses:
        200:
          description: Requested Traffic Matrix found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    traffic_matrix:
                      $ref: '#/components/schemas/traffic_matrix'
                    version:
                      $ref: '#/components/schemas/version'
                    name:
                      $ref: '#/components/schemas/name'
                    id:
                      $ref: '#/components/schemas/id'
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    $ref: '#/components/schemas/error_msg'
                required:
                  - error_msg
            
    
    post:
      tags: 
       - Traffic Matrix
      summary: Creating new Traffic Matrix
      description: This method creates a Traffic Matrix and returns its id
      operationId: TrafficMatrix.create_traffic_matrix
      parameters:
        - $ref: '#/components/parameters/user_id'
      requestBody: 
        description: Providing Traffic Matrix information
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/name'
                traffic_matrix:
                  $ref: '#/components/schemas/traffic_matrix'
                comment:
                  $ref: '#/components/schemas/comment'
      
      responses:
        201:
          description: Traffic Matrix created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/id'
                required: 
                 - id
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    $ref: '#/components/schemas/error_msg'
                  traffic_matrix:
                    $ref: '#/components/schemas/traffic_matrix'
                required:
                  - error_msg
    put:
      tags: 
       - Traffic Matrix
      summary: Updating an existing Traffic Matrix
      description: This method updates a Traffic Matrix from database
      parameters: 
        - $ref: '#/components/parameters/user_id'
      operationId: TrafficMatrix.update_traffic_matrix  
      requestBody:
        description: Providing information for updating Traffic Matrix
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/name'
                id:
                  $ref: '#/components/schemas/id'
                traffic_matrix:
                  $ref: '#/components/schemas/traffic_matrix'
                comment:
                  $ref: '#/components/schemas/comment'
      
      responses:
        200:
          description: Traffic Matrix updated

        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    $ref: '#/components/schemas/error_msg'
                  traffic_matrix:
                    $ref: '#/components/schemas/traffic_matrix'
                required:
                  - error_msg
    delete:
      tags: 
       - Traffic Matrix
      summary: Deleting an existing Traffic Matrix
      operationId: TrafficMatrix.delete_traffic_matrix
      description: This method deletes a traffic Matrix from database
      parameters: 
       - $ref: '#/components/parameters/id'
       - $ref: '#/components/parameters/user_id'
       - $ref: '#/components/parameters/version'
      responses:
        200:
          description: Traffic Matrix deleted
  
  /traffic_matrices/from_excel/{user_id}:
    post:
      tags:
        - Traffic Matrix
      summary: creating traffic matrix with excel file
      operationId: TrafficMatrix.read_from_excel
      parameters:
        - $ref: '#/components/parameters/user_id'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                tm_binary:
                  type: string
                  format: binary
                name:
                  $ref: '#/components/schemas/name'
      responses:
        201:
          description: traffic_matrix in JSON
          content:
            application/json:
              schema:
                type: object
                properties:
                  traffic_matrix:
                    $ref: '#/components/schemas/traffic_matrix'
                  id:
                    $ref: '#/components/schemas/id'
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    $ref: '#/components/schemas/error_msg'
                  traffic_matrix:
                    $ref: '#/components/schemas/traffic_matrix'
                required:
                  - error_msg
          
  /traffic_matrices/read_all/{user_id}:
    description: Reading all saved traffic matrices for a user
    get:
      tags:
       - Traffic Matrix
      summary: Reading all Traffic Matrices
      parameters:
        - $ref: '#/components/parameters/user_id'
      operationId: TrafficMatrix.read_all
      responses:
        200:
          description: Returning traffic matrices
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      $ref: '#/components/schemas/name'
                    id:
                      $ref: '#/components/schemas/id'
                    create_date:
                      type: string
                      format: date-time
                    comment:
                      $ref: '#/components/schemas/comment'
                    version:
                      $ref: '#/components/schemas/version'
                  required:
                    - name
                    - id
                    - date-time
                    - comment
                    - version
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    $ref: '#/components/schemas/error_msg'
                required:
                  - error_msg
          
          
  /clustering/read_all/{user_id}:
    summary: This path is handling operations related to Clustering
    get:
      operationId: Clustering.get_all_clusters
      summary: returning all clusters belonging to a project
      tags:
        - Clustering
      parameters:
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/project_id'
      responses:
        200:
          description: ok response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/cluster'
                    name:
                      $ref: '#/components/schemas/name'
                    id:
                      $ref: '#/components/schemas/id'
                  required:
                    - data
                    - name
                    - id
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    $ref: '#/components/schemas/error_msg'
                required:
                  - error_msg
  
  /clustering/manual/{user_id}:
    get:
      operationId: Clustering.get_cluster
      summary: returning cluster with given id
      tags:
        - Clustering
      parameters:
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/cluster_id'
      responses:
        200:
          description: ok response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/cluster'
                  name:
                    $ref: '#/components/schemas/name'
                required:
                  - data
                  - name
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    $ref: '#/components/schemas/error_msg'
                required:
                  - error_msg
    post:
      operationId: Clustering.create_cluster
      summary: Creating clusters
      tags: 
        - Clustering
      description: Creating new cluster in a project (it will have a 1 to 1 relation to pt and pt_version)
      parameters: 
        - $ref: '#/components/parameters/user_id'
      requestBody:
        description: Providing Gateways and Subnodes
        content:
          application/json:
            schema:
              type: object
              properties:
                project_id:
                  $ref: '#/components/schemas/id'
                clusters:
                  type: array
                  items:
                    type: object
                    properties:
                      cluster:
                        $ref: '#/components/schemas/cluster'
                      name:
                        $ref: '#/components/schemas/name'
                    required:
                      - name
                      - cluster
      responses:
        201:
          description: Cluster saved in DataBase
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    $ref: '#/components/schemas/error_msg'
                required:
                  - error_msg

  /projects/{user_id}:
    summary: This path job is to handle projects
    get:
      description: Accessing a existing Project
      summary: Obtaining stored Project
      tags: 
        - Project
      parameters: 
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/user_id'
      operationId: Project.read_project
      responses:
        200:
          description: Sending PT_id, TM_id
          content:
            application/json:
              schema:
                type: object
                properties:
                  tm_id:
                    $ref: '#/components/schemas/tm_id'
                  pt_id:
                    $ref: '#/components/schemas/pt_id'
                  current_pt_version:
                    $ref: '#/components/schemas/version'
                  current_tm_version:
                    $ref: '#/components/schemas/version'
                required:
                  - tm_id
                  - pt_id
                  - current_pt_version
                  - current_tm_version
                  #results list of id's
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    $ref: '#/components/schemas/error_msg'
                required:
                  - error_msg
                
    post:
      description: Creating new project using physical topology, traffic matrix, Cluster id
      summary: Creating new Project
      tags: 
       - Project
      parameters: 
        - $ref: '#/components/parameters/user_id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/name'
                pt_id:
                  $ref: '#/components/schemas/pt_id'
                tm_id:
                  $ref: '#/components/schemas/tm_id'
                pt_version:
                  $ref: '#/components/schemas/version'
                tm_version:
                  $ref: '#/components/schemas/version'
              required:
                - name
                - pt_id
                - tm_id
      
      operationId: Project.create_project
      responses:
        201:
          description: Sending back Project id
          content:
            application/json:
              schema:
                type: object
                properties:
                  project_id:
                    type: integer
                required: 
                  - project_id
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    $ref: '#/components/schemas/error_msg'
                  physical_topology:
                     $ref: '#/components/schemas/physical_topology'
                  traffic_matrix:
                     $ref: '#/components/schemas/traffic_matrix'
                required:
                  - error_msg
    
    put:
      summary: Updating an existing Project
      tags: 
        - Project
      description: Updating Project Using Project_Id
      parameters: 
        - $ref: '#/components/parameters/user_id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/name'
                pt_id:
                  $ref: '#/components/schemas/pt_id'
                tm_id:
                  $ref: '#/components/schemas/tm_id'
                id:
                  $ref: '#/components/schemas/id'
                current_pt_version:
                  $ref: '#/components/schemas/version'
                current_tm_version:
                  $ref: '#/components/schemas/version'
                 
      operationId: Project.update_project
      responses:
        200:
          description: Done
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    $ref: '#/components/schemas/error_msg'
                  physical_topology:
                     $ref: '#/components/schemas/physical_topology'
                  traffic_matrix:
                     $ref: '#/components/schemas/traffic_matrix'
                required:
                  - error_msg
    
    delete:
      summary: Deleting an Existing Project
      tags:
        - Project
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/user_id'
      operationId: Project.delete_project
      
      responses:
        200:
          description: Project deleted
  
  /users/search_for_users:
    summary: searching for users
    get:
      summary: this endpoint will search in usernames with given sub string
      tags:
        - User
      operationId: user.search_user
      parameters:
        - name: search_string
          in: query
          schema:
            type: string
          required: true
      responses:
        200:
          description: found users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      $ref: '#/components/schemas/id'
                    username:
                      type: string
  
  /sharing/physical_topology/{user_id}:
    summary: sharing physical topology
    post:
      summary: sharing physical topology (owners only)
      tags:
        - Sharing
      operationId: Sharing.share_physical_topology
      parameters:
        - $ref: '#/components/parameters/user_id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pt_id:
                  $ref: '#/components/schemas/pt_id'
                user_id_list:
                  type: array
                  items:
                    $ref: '#/components/schemas/id'
      responses:
        200:
            description: ok
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    $ref: '#/components/schemas/error_msg'
                required:
                  - error_msg

  /sharing/traffic_matrix/{user_id}:
    summary: sharing traffic matrix
    post:
      summary: sharing traffic matrix (owners only)
      tags:
        - Sharing
      operationId: Sharing.share_traffic_matrix
      parameters:
        - $ref: '#/components/parameters/user_id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tm_id:
                  $ref: '#/components/schemas/tm_id'
                user_id_list:
                  type: array
                  items:
                    $ref: '#/components/schemas/id'
      responses:
        200:
            description: ok
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    $ref: '#/components/schemas/error_msg'
                required:
                  - error_msg
  
  /sharing/add_designer_to_project/{user_id}:
    summary: adding designer to project
    post:
      summary: adding existing user to project
      tags:
        - Sharing
        - User
      operationId: Sharing.add_designer_to_project
      parameters:
        - $ref: '#/components/parameters/user_id'
      requestBody:
        content:
          application/json:
            schema: 
              type: object
              properties:
                id_list:
                  type: array
                  items:
                    $ref: '#/components/schemas/id'
                project_id:
                  $ref: '#/components/schemas/id'
      responses:
        200:
            description: designers added
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    $ref: '#/components/schemas/error_msg'
                required:
                  - error_msg
  /login:
    summary: path for logging in
    post:
      summary: Accessing user_id with username and password
      tags:
        - User
      operationId: user.login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        200:
          description: User Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                  token:
                    type: string
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    $ref: '#/components/schemas/error_msg'
                required:
                  - error_msg
  
  /projects/read_all/{user_id}:
    summary: path for getting all projects associated with user_id
    get:
      summary: getting all projects
      tags:
        - Project
      parameters:
        - $ref: '#/components/parameters/user_id'
      operationId: Project.read_all
      responses:
        200:
          description: Projects found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
        default:
          description: error handling
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_msg:
                    $ref: '#/components/schemas/error_msg'
                required:
                  - error_msg

              
      
      
      
      